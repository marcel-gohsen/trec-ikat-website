{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Last updated: August 4, 2025 </p> <p> See the official TREC iKAT repository for tools and code related to the track</p>"},{"location":"#about-trec-interactive-knowledge-assistance-track-ikat","title":"About TREC Interactive Knowledge Assistance Track (iKAT)","text":"<p>The widespread adoption of voice-based assistants is significantly changing how we interact with technology. According to a Comscore report, over 20% of U.S. households now own a smart speaker. This trend is further exemplified by the recent introduction of assistant-enabled smart glasses by major tech companies, pushing the boundaries of real-world applications.</p> <p>Despite their proficiency in executing simple, well-defined tasks, these assistants still face limitations in supporting conversational information seeking (CIS). CIS is crucial within fields such as information retrieval, natural language processing, and dialogue systems, focusing on tasks like ranking, summarizing, and question answering.</p> <p>The TREC Interactive Knowledge Assistance Track (iKAT) builds on the four years of success of the TREC Conversational Assistance Track (CAsT), which can be explored further here. iKAT is designed to research and develop conversational agents that excel in collaborative information seeking by personalizing responses based on user-derived insights.</p> <p>CAsT's fourth year introduced more interactive elements, such as clarifications and suggestions, fostering multi-turn, multi-path conversations. iKAT evolves from CAsT with a renewed focus on supporting diverse, multi-turn conversations tailored to the user\u2019s background, perspective, and context. This means that for any given topic, the flow and substance of the conversation can vary significantly depending on the user\u2019s individual traits and needs.</p> <p>iKAT's primary goal is to advance research on conversational agents that not only respond to users\u2019 immediate queries but also adapt their responses based on the cumulative context of the interaction. This aspect of personalization is particularly timely with the advancements in large language models (LLMs), which introduce new challenges and opportunities in the dynamic interplay of user context, system promptings, and conversational initiatives.</p> <p>Shield: </p> <p>All data associated with this work is licensed and released under a Creative Commons Attribution-ShareAlike 4.0 International License.</p> <p></p>"},{"location":"#track-coordinators","title":"Track Coordinators","text":"<p>Mohammad Aliannejadi, University of Amsterdam, The Netherlands. Dr. Aliannejadi is an Assistant Professor at the IRLab (formerly known as ILPS), the University of Amsterdam in The Netherlands. His research is in modeling user information needs with a focus on recommender systems, unified (meta) search, and conversational systems. </p> <p>Zahra Abbasiantaeb, University of Amsterdam, The Netherlands. Zahra is a Ph.D. student at the IRLab supervised by Dr. Aliannejadi. She is working on conversational search and recommendation. Earlier, she has also worked on patent reference mining. Zahra obtained her masters in AI from the Amirkabir University of Technology with a focus on question answering systems.</p> <p>Simon Lupart, University of Amsterdam, The Netherlands. Simon is a Ph.D. student at the IRLab supervised by Dr. Aliannejadi and Prof. Kanoulas. He worked in IR for the past two years at Naver Labs Europe, and joined UvA to focus on conversational search.</p> <p>Nailia Mirzakhmedova, Bauhaus-Universit\u00e4t Weimar, Germany. Nailia is a PhD student at the chair of Intelligent Information Systems supervised by Prof. Dr. Benno Stein. Her research focuses on computational argumentation, framing, and user simulation for the evaluation of conversational search systems. </p> <p>Marcel Gohsen, Bauhaus-Universit\u00e4t Weimar, Germany. Marcel is a PhD student at the chair of Intelligent Information Systems supervised by Prof. Dr. Benno Stein. His research concentrates on the intersection between information retrieval and natural language processing with a particular focus on conversational search, user simulation, and generative IR. </p> <p>Johannes Kiesel, GESIS - Leibniz Institute for the Social Sciences, Cologne, Germany. Dr. Kiesel is the leader of the Big Data Analytics team at GESIS - Leibniz Institute for the Social Sciences in Cologne, Germany. His research interests include conversational search, argumentation systems, and user simulation.</p> <p>Jeff Dalton, University of Edinburgh, Scotland. Dr. Dalton is a Associate Professor (Reader) and Chancellor's Fellow at the School of Informatics, the University of Edinburgh. He is also a Turing AI Fellow and PI for the GRILL Lab. His research focuses on new methods for machine understanding of language and text data using deep neural networks and entity knowledge graphs for improving information seeking applications.</p>"},{"location":"#submit-your-runs-ikat-2025","title":"Submit Your Runs (iKAT 2025)","text":"<p>We will share details of how to submit the runs soon. We will also provide a validation script to validate your runs for submission. Runs failing the validation script will not be accepted.</p>"},{"location":"#announcements","title":"Announcements","text":"<ul> <li>(New!!) Limit of submittable runs to the interactive task increased to 4.</li> <li>(New!!) Deadline for the submission to the interactive task postponed to 15th August.</li> <li>Release of simulation API documentation.</li> <li>Deadline for the submission to the offline task postponed to 27th July.</li> <li>Release of the test topics for TREC iKAT 2025.  </li> <li>Release of the guidelines for TREC iKAT 2025.</li> <li>Release of a questionnaire to get feedback on the used document collection.</li> </ul>"},{"location":"#publications","title":"Publications","text":"<ul> <li> <p>iKAT Year 1 Overview Paper</p> </li> <li> <p>iKAT Resource Paper. SIGIR 2024</p> </li> </ul>"},{"location":"#contact","title":"Contact","text":"<ul> <li>Email: trec.ikat.ai@gmail.com</li> <li>Google Groups: trec-ikat@googlegroups.com</li> <li>Slack: ikat-2025</li> </ul>"},{"location":"#rag-related-tracks-at-trec-2025","title":"RAG-related Tracks at TREC 2025","text":"<p>Besides iKAT, there are other tracks at TREC 2025 that focus on or invite RAG-based solutions, with a similar submission format. Therefore, cross-participation is highly encouraged to explore system performance across domains. </p> <ul> <li>TREC BioGEN 2025 Track</li> <li>TREC DRAGUN 2025 Track</li> <li>TREC RAG 2025 Track </li> <li>TREC RAGTIME 2025 Track</li> </ul>"},{"location":"additional_data/","title":"Additional Data","text":""},{"location":"additional_data/#ikat-year-1-and-2-2023-and-2024","title":"iKAT Year 1 and 2 (2023 and 2024)","text":"File Description 2024_test_topics.json Test topics in JSON format. 2023_train_topics.json Train topics in JSON format. 2023_test_topics.json Test topics in JSON format. 2023_train_topics_psg_text.jsonl Text of provenance passages in the train topics. 2023_test_topics_psg_text.jsonl Text of provenance passages in the test topics. 2023_passages_hashes.tsv.bz2 TSV file containing MD5 hashes of passage texts. The <code>.tsv</code> file has this format: <code>doc_id   passage_number    passage_MD5</code>. Total download size is 2.2GB. 2023_top_1000_query_results.zip This zip file has queries from both training and testing topics, saved in <code>queries_train.txt</code> and <code>queries_test.txt</code> respectively. The results from the iKAT searcher (<code>BM25</code> using manually resolved queries) are saved in the <code>query_results_train</code> and <code>query_results_test</code> folders. Each result file, with up to 1000 results, corresponds to a query based on line numbers, starting from zero. For instance, the results for the first query in <code>queries_train.txt</code> can be found in <code>query_results_train/query_results_000.txt</code>. In each result file, every line shows the <code>ClueWeb22 ID</code> followed by the <code>URL</code>. ret_bm25_rm3--type_automatic--num_ptkb_3--k_100--num_psg_3.official.run.json Automatic  Run ret_bm25_rm3--type_manual--num_ptkb_3--k_100--num_psg_3.official.run.json Manual  Run"},{"location":"additional_data/#baseline-runs-ikat-2023","title":"Baseline Runs iKAT 2023","text":"<p>We provide two baseline runs (linked above). </p> <ul> <li>Method.<ul> <li><code>BM25+RM3</code> (Pyserini default) as the initial retrieval (denoted by <code>ret_bm25_rm3</code> in the file name) method to retrieve 100 passages per query (denoted by <code>k_100</code>).</li> <li>The query in each turn was re-written using: <ol> <li>The context, and </li> <li>The top-3 relevant PTKB statements (denoted by <code>num_ptkb_3</code> in the file name).</li> </ol> </li> </ul> </li> <li>Query re-writing. In all cases, the re-written query was construted by appending the relevant PTKB statements to the (manually or automatically) resolved query.</li> <li>Response generation. A response was generated using the top-3 passages retrieved with the re-written query (denoted by <code>num_psg_3</code> in the file name). We use the <code>T5</code> model <code>mrm8488/t5-base-finetuned-summarize-news</code> available on HuggingFace for this purpose. </li> <li>For automatic runs. <ul> <li>The relevant PTKB statements were determined automatically by re-ranking the statements using <code>SentenceTransformers</code>, specifically, the model <code>cross-encoder/ms-marco-MiniLM-L-6-v2</code> available on HuggingFace.</li> <li>The query was re-written automatically using the <code>castorini/t5-base-canard</code> model available on HuggingFace.</li> </ul> </li> <li>For manual runs. <ul> <li>The relevant PTKB statements provided in the <code>ptkb_provenance</code> field were used. </li> <li>The manually re-written query provided in the <code>resolved_utterance</code> field was used.</li> </ul> </li> </ul>"},{"location":"additional_data/#data-from-trec-cast","title":"Data from TREC CAsT","text":"<p>We provide the data from previous years' TREC CAsT below. The iKAT topics are similar, with the addition of the Personal Text Knowledge Base. For more information on TREC CAsT, see the website and read the overview papers [2019] [2020] [2021] [2022]</p> <p>Note. TREC CAsT did not include a PTKB but you can be creative and modify the data according to your needs. Also, TREC CAsT used different collections (Wikipedia, KILT, MS MARCO, etc.) at different stages. iKAT is using a subset of the recently released ClueWeb22-B. </p>"},{"location":"additional_data/#cast-year-4-2022","title":"CAsT Year 4 (2022)","text":"File Description 2022_automatic_evaluation_topics_tree_v1.0.json Contains each conversation tree (topic) with an automatic rewrite generated for each user utterance. 2022_evaluation_topics_turn_ids.json Contains each conversation tree (topic) with the resolved query for each user utterance. 2022_evaluation_topics_tree_v1.0.json Contains all ids that responses/ranked passages need to be returned for. 2022_evaluation_topics_flattened_duplicated_v1.0.json Contains all possible conversation paths across all the conversation trees."},{"location":"additional_data/#cast-year-3-2021","title":"CAsT Year 3 (2021)","text":"File Description 2021_automatic_evaluation_topics_v1.0.json 25 primary evaluation topics in JSON format. Variant: Automatic 2021_manual_evaluation_topics_v1.0.json 25 primary evaluation topics in JSON format. Variant: Manual 2021qrels.txt Qrels file for passage ranking task."},{"location":"additional_data/#cast-year-2-2020","title":"CAsT Year 2 (2020)","text":"File Description 2020_automatic_evaluation_topics_v1.0.json 25 primary evaluation topics in JSON format. Variant: Automatic 2020_manual_evaluation_topics_v1.0.json 25 primary evaluation topics in JSON format. Variant: Manual 2020qrels.txt Qrels file for passage ranking task."},{"location":"additional_data/#cast-year-1-2019","title":"CAsT Year 1 (2019)","text":"File Description train_topics_v1.0.json 30 example training topics in JSON format. evaluation_topics_v1.0.json 50 evaluation topics in JSON format. 2019qrels.txt Official evaluation qrels file for passage ranking task. train_qrels.txt Limited (incomplete) training judegements for 5 topics (approximately 50 turns). The judgments are graded on a three point scale (2 very relevant, 1 relevant, and 0 not relevant)."},{"location":"data/","title":"Datasets and Resources","text":""},{"location":"data/#topics-for-ikat-year-3-2025","title":"Topics for iKAT Year 3 (2025)","text":"File Description 2025_test_topics.json Test topics in JSON format."},{"location":"data/#additional-data","title":"Additional Data","text":"<p>We also provide additional data from iKAT Year 1 and 2 and TREC CAsT 2019-2022. </p>"},{"location":"data/#trec-ikat-clueweb22-b-passage-collection","title":"TREC iKAT ClueWeb22-B Passage Collection","text":"<p>We provide a segmented version of the TREC iKAT ClueWeb22-B Document collection available from CMU in two formats: <code>JSONL</code> and <code>TrecWeb</code>. </p> <p>In case you have segmented the document collection yourself, you may check whether your segments match ours using the <code>tsv</code> file of passage hashes provided. </p> <ul> <li>Passage collection in <code>JSONL</code> format.<ul> <li>These files contain passages in the form <code>{\"id\": \"[passage id]\", \"contents\": \"[passage text]\", \"url\": \"[ClueWeb22 document URL]\"}</code></li> <li>Passage IDs are structured as: <code>doc_id:passage_number</code></li> <li>Total download size is approximately 31 GB.</li> <li>Total number of passages is 116,838,987</li> </ul> </li> <li> <p>Passage collection in <code>TrecWeb</code> format.</p> <ul> <li>Format as shown on website.</li> <li>Total download size is approximately 31 GB</li> </ul> </li> <li> <p>Passage hashes.</p> <ul> <li><code>tsv</code> file containing MD5 hashes of passage texts.</li> <li>The <code>.tsv</code> file has this format: <code>doc_id   passage_number    passage_MD5</code></li> <li>Total download size is 2.2 GB</li> </ul> </li> </ul>"},{"location":"data/#pre-built-indices","title":"Pre-built Indices","text":"<p>We provide the following indices to help participants get started.</p> File Description Size (Approximate) Lucene passage index (<code>ikat_2023_passage_index.tar.bz2</code>) Sparse Lucene index generated from the <code>JSONL</code> passage files above using Pyserini. The files form a single <code>.tar.bz2</code> archive split into sections for simpler downloading due to the overall size. To extract the archive, once downloaded, combine each of the sections in name order back into a single file using the following command: <code>cat ikat_2023_passage_index.tar.bz2.part* &gt; ikat_2023_passage_index.tar.bz2</code>. 150 GB DeepCT Index (<code>pt_deepct.tar.bz2</code>) DeepCT index built using PyTerrier 70 GB SPLADE Index (<code>pt_splade.tar.bz2</code>) SPLADE++ index built using PyTerrier 138 GB SPLADE index (<code>splade_index.tar.bz2</code>) SPLADE++ index built using official SPALDE code 97 GB"},{"location":"data/#code-to-build-and-search-indices","title":"Code to build and search indices","text":"<p>We open-source the code used to build the indices above. You can find the code here</p>"},{"location":"data/#how-do-i-access-these-resources","title":"How do I access these resources?","text":"<p>Each team should use a URL of <code>https://ikattrecweb.grill.science/&lt;team_name&gt;</code> to access the files. The page will ask for a userID and password. Enter the login details which you obtained from the iKAT organizers. You should see a page which lists each type of data and has links to the individual files listed above, along with their checksum files.</p> <p>NOTE: Please do not share IPs in the <code>10.x.x.x</code> range which is for private networks. We would need a suitable public IP so that we may configure the above download link to work for you.</p>"},{"location":"data/#ikat-searcher","title":"iKAT Searcher","text":"<p>iKAT Searcher is a simple tool developed to help with creating the topics for iKAT. The tool allows topic developers to visually assess the behaviour of a retrieval system, ultimately making it easier to develop challenging, but interesting, topics for the Track. You can interact with the system here. See the GitHub repository.</p>"},{"location":"data/#run-validation","title":"Run Validation","text":"<p>We provide code for run validation in our Github repository. Please see the associated README file for detailed instructions on how to run the code. It is crucial to validate your submission files before submitting them. The run files that fail the validation phase will be discarded. We advise you to get familiarized with the validation script as soon as possible and let us know if you have any questions or encounter any problems working with it. </p> <p>Note. You need the MD5 hash file of the passages in the collection to run the validation code. You can download this file from above. </p> <p>Below is a summary of the checks that the script performs on a run file.</p> <ul> <li>Can the file be parsed as valid JSON?</li> <li>Can the JSON be parsed into the protocol buffer format defined in <code>protocol_buffers/run.proto</code>?</li> <li>Does the run file have at least one turn? </li> <li>Is the <code>run_name</code> field non-empty?</li> <li>Is the <code>run_type</code> field non-empty and set to <code>automatic</code> or <code>manual</code>?</li> <li>Does the number of turns in the run match the number in the test topics file?</li> <li>Does the number of turns in each topic in the run match the corresponding number in the test topics file?</li> <li>For each turn in the run:</li> <li>Is the turn ID valid and matches an entry in the topics file?</li> <li>Is any turn ID higher than expected for the selected topic (e.g. turns 1-5 in the topic, but a turn has ID 6 in the run file)?</li> <li>(optional, enabled by default) Do all the <code>passage_provenance</code> passage IDs appear in the collection?</li> <li>For each response in the turn:<ul> <li>Does it have a rank &gt; 0?</li> <li>Do the ranks increase with successive responses?</li> <li>Does the response have a non-empty <code>text</code> field?</li> <li>For each <code>passage_provenance</code> entry:</li> <li>Does it have a score less than the previous entry?</li> <li>Does it have a passage ID containing a single colon and beginning with 'clueweb22-'?</li> <li>Are there less than 1000 <code>passage_provenance</code> entries listed for the response?</li> <li>Is there at least one <code>passage_provenance</code> with its <code>used</code> field set to True in the response?</li> <li>Does the response have at least one <code>passage_provenance</code> entry?</li> <li>Does the response have at least one <code>ptkb_provenance</code> entry?</li> <li>For each <code>ptkb_provenance</code> entry:</li> <li>Does it have a non-empty ID?</li> <li>Does the ID appear in the <code>ptkb</code> field of the topic data?</li> <li>Does the text given match that in the topic data?</li> <li>Does it have a score less than the previous entry?</li> </ul> </li> </ul>"},{"location":"demo/","title":"TREC iKAT: Getting Started","text":""},{"location":"demo/#objective","title":"Objective","text":"<p>To help you get started, we (the iKAT organizers) have put together this guide. In this demo, we'll explore and build the components of a simple iKAT system. These components include:</p> <ul> <li>Query Rewriter</li> <li>Passage Retriever, and</li> <li>Response Generator</li> </ul>"},{"location":"demo/#system-architecture","title":"System Architecture","text":"<p>The diagram above shows how the components of our system interact.</p> <p>Given a query, conversation context, and the PTKB of the user, our system's Query Rewriter reformulates the query to resolve ambiguity. Next, the Passage Retriever uses the reformulated query to retrieve the top-K candidate passages from an index. Finally, the Response Generator uses the top-N of the K retrieved passages to generate a coherant response. The output of our system is a response along with the provenance relevant passages used to construct the response for the input query, based on the conversation context.</p>"},{"location":"demo/#setup","title":"Setup","text":"<p>Before putting our system together, let's download the topics and the demo collection.</p>"},{"location":"demo/#trec-ikat-2023-simple-english-wikipedia-passage-collection","title":"TREC iKAT 2023 Simple English Wikipedia Passage Collection","text":"<p>Downloading and processing the entire TREC iKAT 2023 ClueWeb22-B passage collection is not possible on Colab. Moreover, it requires a licenece to use. For this demo, we will use Simple English Wikipedia. Compared to the full English wikipedia, it has only about 170k articles. The iKAT organizers have preprocessed the articles and created a passage collection for you to use. This collection is in a <code>jsonl</code> format. An example record from the collection is shown below:</p> <pre><code>{\n    \"id\": \"simplewiki:Ted%20Cassidy:0\",\n    \"contents\": \"Ted Cassidy (July 31, 1932 - January 16, 1979) was an American actor. He was best known for his roles as Lurch and Thing on \\\"The Addams Family\\\".\",\n    \"title\": \"Ted Cassidy\",\n    \"wiki_id\": \"9822\"\n}\n</code></pre> <p>Each record in this collection contains the following fields:</p> <ol> <li><code>id</code>: The passage id is a combination of (1) the string \"simplewiki:\", (2) the encoded title of the Wikipedia page, and (3) the passage number. This is similar to the iKAT 2023 passage id format (doc_id:passage_number) </li> <li><code>contents</code>: The text of the passage.</li> <li><code>title</code>: The title of the Wikipedia page to which this passage belongs.</li> <li><code>wiki_id</code>: The Wikipedia page ID of the Wikipedia page to which this passage belongs. These IDs are unique and will never change</li> </ol> <p>Note. As this collection is a toy collection meant for demo purposes, the quality of results we obtain in this tutorial may be affected.</p> <pre><code>!pip install gdown\n</code></pre> <pre><code>!echo \"Creating target directory..\"\n!mkdir -p ikat_demo\n!mkdir -p ikat_demo/collection\n\nimport gdown\n# The Google Drive file ID and the destination path\nurl = 'https://drive.google.com/uc?id=1touBjwkPByH69utT9_sevr5nYT0TTZ2M'\noutput = '/content/ikat_demo/collection/simplewiki-2020-11-01.passages.jsonl'\ngdown.download(url, output, quiet=False)\n\nurl = 'https://drive.google.com/uc?id=1zPSiAqLmbx9QFGm6walnuMUl7xoJmRB7'\noutput = '/content/ikat_demo/test.json'\ngdown.download(url, output, quiet=False)\n</code></pre>"},{"location":"demo/#creating-a-bm25-index","title":"Creating a BM25 Index","text":"<p>Now, we'll use the Pyserini information retrieval toolkit to build a sparse index for the collection we just downloaded. Pyserini provides APIs for our indexing needs and supports both sparse and dense retrieval. Alternatively, you may also use PyTerrier.</p> <p>First, let's install Pyserini and its dependcies.</p> <pre><code>!pip install pyserini\n!pip install faiss-cpu\n</code></pre> <p>Pyserini provides ingestors for document collections in many different formats. The simplest, however, is the following JSON format:</p> <pre><code>{\n  \"id\": \"doc1\",\n  \"contents\": \"this is the contents.\"\n}\n</code></pre> <p>The collection to be used with Pyserini must be in a <code>jsonl</code> format, where each line is a <code>json</code> record structured as above. The preprocessed collection that we provide is already in a <code>jsonl</code> format.</p> <pre><code>!python -m pyserini.index.lucene \\\n  --collection JsonCollection \\\n  --input  '/content/ikat_demo/collection/' \\\n  --index '/content/ikat_demo/index' \\\n  --generator DefaultLuceneDocumentGenerator \\\n  --threads 8 \\\n  --storePositions --storeDocvectors --storeRaw\n</code></pre> <p>To check that our new sparse index works, let's try searching with it. The code below loads the index and searches for the query <code>global warming</code>.</p> <pre><code>from pyserini.search.lucene import LuceneSearcher\n\nsearcher = LuceneSearcher('ikat_demo/index')\nquery = 'global warming'\nhits = searcher.search(query)\n\nfor i in range(len(hits)):\n    print(f'{i+1:2} {hits[i].docid:4} {hits[i].score:.5f}')\n</code></pre> <p>Let's see the contents of the best ranking document.</p> <pre><code>import json\nbest_ranked_doc = searcher.doc(hits[0].docid)\nparsed_doc = json.loads(best_ranked_doc.raw())\nparsed_doc['contents']\n</code></pre>"},{"location":"demo/#query-rewriting","title":"Query Rewriting","text":"<p>iKAT topics mimic real-world dialogue phenomena. As a result, utterances within topics become increasingly ambiguous as the topic unfolds. On their own, these utterances likely won't return good candidates from our index, so we need to reformulate them using information from prior turns in the topic.</p> <p>Let's examine the utterances in a topic to demonstrate the need for query rewriting. As an example, we will examine a segment from the iKAT 2023 test topic on \"Finding a diet\" conversation.</p> <pre><code>{\n    \"turn_id\": 1,\n    \"utterance\": \"Hey, Assistant! I am wondering what to cook for dinner tonight for my family.\",\n    \"resolved_utterance\": \"Hey, Assistant! I am wondering what to cook for dinner tonight for my family.\",\n    \"response\": \"Hey there! There are many healthy and delicious recipes you could try! For example, a stir-fry with lean proteins like chicken or tofu and a variety of colorful vegetables is always a good option. Or you could try making a Mediterranean quinoa salad with cucumbers, tomatoes, feta cheese, and a light lemon vinaigrette. Baked salmon with a side of roasted vegetables is also a great choice.\",\n},\n{\n    \"turn_id\": 2,\n    \"utterance\": \"Nah, we had salmon just two days ago. But the Mediterranean dish that you mentioned sounds interesting, could you provide the recipe for that?\",\n    \"resolved_utterance\": \"Nah, we had salmon just two days ago. But the Mediterranean quinoa salad sounds interesting, can you provide the recipe for the Mediterranean quinoa salad?\",\n    \"response\": \"Ah, I see. Of course! Here's a simple recipe for Mediterranean Quinoa Salad. The ingredients you need are 1 cup quinoa, 2 cups water, 1/4 cup extra-virgin olive oil, 2 limes, juiced, 2 teaspoons ground cumin, 1 teaspoon salt, 1/2 teaspoon red pepper flakes (optional), 1 1/2 cups halved cherry tomatoes, 1 cucumber, diced, 1/2 cup chopped fresh mint, 1/2 cup feta cheese. Instructions: Bring quinoa and water to a boil in a saucepan. Reduce heat to medium-low, cover, and simmer until quinoa is tender and water has been absorbed, 10 to 15 minutes. Set aside to cool. In a large bowl, whisk olive oil, lime juice, cumin, salt, and red pepper flakes together to create the dressing. In the bowl with the dressing, mix in quinoa, tomatoes, cucumber, and mint. Stir until well mixed. Top with feta cheese before serving. Enjoy!\"\n},\n{\n    \"turn_id\": 3,\n    \"utterance\": \"That's great, thanks! But I'm thinking of reducing the amount of oil in the dressing. Any suggestions?\",\n    \"resolved_utterance\": \"That's great, thanks! But I'm thinking of reducing the amount of oil in the salad dressing. Any suggestions?\",\n    \"response\": \"Certainly! You can reduce the amount of oil by using more lime juice or adding some water. Alternatively, you could substitute some of the oil with a different kind of liquid like vinegar. This should maintain a good balance between tartness and the need for oil as an emulsifier. Which of these do you think works the best for you?\"\n},\n{\n    \"turn_id\": 4,\n    \"utterance\": \"Thanks! My children don't like vinegar, so I would probably go with lime juice. Can I also use butter instead?\",\n    \"resolved_utterance\": \"Thanks! My children don't like vinegar, so I would probably go with lime juice. Can I also butter instead of oil in the Mediterranean Quinoa Salad?\",\n    \"response\": \"Butter can be substituted for vegetable oil in some dishes, but not always. Butter is a solid fat, while vegetable oil is liquid, so they have different effects on the consistency and texture of the food. Butter is also higher in calories and lower in trans fats than vegetable oil. If you want to use butter instead of vegetable oil, you may need to adjust the quantity, melt it down, and let it cool a bit. For example, 1 cup of butter equals 7/8 cup of vegetable oil.\"\n},\n{\n    \"turn_id\": 5,\n    \"utterance\": \"I see, thanks! What are some cheese substitutes?\",\n    \"resolved_utterance\": \"I see, thanks! What are some substitutes for cheese in the Mediterranean Quinoa Salad?\",\n    \"response\": \"I can suggest some alternatives for feta cheese. One option is to use a lower fat cheese like mozzarella. Another is to use a plant-based cheese substitute, if you're open to vegan options. You could also try adding a bit of nutritional yeast for a cheese-like flavor with less fat and more protein.\"\n},\n{\n    \"turn_id\": 6,\n    \"utterance\": \"Can you compare the first two?\",\n    \"resolved_utterance\": \"Can you compare mozzarella with plant-based cheese?\",\n    \"response\": \"Mozzarella cheese is a dairy product derived from milk and produced in a wide range of flavors. It comprises fat, usually from the milk of cows, buffalo, goats, or sheep. On the other hand, vegan cheese is a non-dairy, plant-based product. Vegan cheese is 100 percent animal-free cheese and is made using vegetable proteins. The ingredients of vegan cheese include soy, nuts, cashews, and vegetable oils (such as coconut oil). Vegan cheese is made using a process similar to traditional cheese making-without the animal milk. During the process, the plant proteins are separated using bacteria. Then the ingredients, such as oils and thickeners, are added to achieve the desired cheese-like consistency.\"\n},\n{\n    \"turn_id\": 7,\n    \"utterance\": \"Which of these is suitable for me?\",\n    \"resolved_utterance\": \"Which of mozzarella and vegan cheese is suitable for me?\",\n    \"response\": \"Based on the nutritional facts, mozzarella can be considered safe for lactose-intolerant people to eat, but be aware that the type of mozzarella you buy may not help reduce your symptoms. This is because many types of processed and packaged mozzarella also contain whey powder or casein - two other forms of dairy which are high in lactose. However, mozzarella has almost no lactose. Just one ounce of cheese provides around 0.3 grams of lactose. Vegan cheese is also a good alternative for lactose-intolerant people. Vegan cheeses are 100 percent animal-free and made using vegetable proteins. There are many different types of vegan cheese available, including vegan mozzarella. So, both mozzarella and vegan cheese can be suitable for lactose-intolerant people. It depends on your personal preference and dietary needs.\"\n},\n</code></pre> <p>This topic starts with a question regarding selecting a diet. If we isolate <code>Turn 6</code> from the rest of the conversation and use it for search, we would likely get minimal, if any, results.</p> <p>Now, let's see how a query rewriter helps.</p> <p>We'll use a <code>T5</code> query rewriter from <code>HuggingFace</code>. It is finetuned on the <code>CANARD</code> dataset but works effectively on iKAT queries.</p> <pre><code># Load model and tokenizer from HuggingFace\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM\nimport torch\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nrewriter = AutoModelForSeq2SeqLM.from_pretrained(\"castorini/t5-base-canard\").to(device).eval()\nrewriter_tokenizer = AutoTokenizer.from_pretrained(\"castorini/t5-base-canard\")\n</code></pre> <p>The model rewrites an utterance using that utterance and all previous utterances and system responses as input. The utterance and previous turn utterances and system responses should be separated by <code>|||</code> when building the input to the model.</p> <p>Let's read the <code>json</code> data file and load the turns.</p> <pre><code>with open('/content/ikat_demo/test.json', 'r') as f:\n    topics = json.load(f)\n</code></pre> <p>Next, we write a small function to extract the context.</p> <p>The provided Python function, <code>extract_context</code>, extracts a sequence of utterances and responses up to a given <code>turn_id</code> from a JSON data structure. Here's a breakdown:</p> <ol> <li> <p>Purpose: Extracts a series of utterances and responses up to a specified turn from a given JSON data based on the provided <code>number</code>.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>json_data</code>: A list of dictionaries, where each dictionary represents a conversation that has a unique number and contains a series of turns.</li> <li><code>number</code>: The unique identifier for a specific conversation in the JSON data.</li> <li><code>turn_id</code>: A specified turn up to which the utterances and responses will be extracted.</li> </ul> </li> <li> <p>Process:</p> <p>a. Locate Conversation: Loops through the <code>json_data</code> to find the dictionary with the given <code>number</code>.</p> <p>b. Error Handling: If no dictionary with the given <code>number</code> is found, it returns a message indicating so.</p> <p>c. Extracting Text: Loops through the turns within the found conversation and appends the utterances and responses up to the <code>turn_id</code> to a list.</p> <p>d. Context Formation: Concatenates the extracted utterances and responses using \"|||\" as a separator to form the context.</p> </li> <li> <p>Output: A tuple containing:</p> <ul> <li>The current <code>utterance</code> for the provided <code>turn_id</code>.</li> <li>The <code>context</code>, which is the sequence of utterances and responses up to the given <code>turn_id</code>, concatenated with \"|||\".</li> </ul> </li> </ol> <pre><code>def extract_context(json_data, number, turn_id):\n    # Find the correct dictionary with the given number\n    data = None\n    for item in json_data:\n        if item['number'] == number:\n            data = item\n            break\n\n    # If we couldn't find the data for the given number\n    if not data:\n      print(\"No data found for the given number.\")\n      return \"No data found for the given number.\", None\n\n    # Extract the utterance and response values\n    texts = []\n    current_utterance = \"\"\n    for turn in data['turns']:\n        if turn['turn_id'] &lt; turn_id:\n            texts.append(turn['utterance'])\n            texts.append(turn['response'])\n        elif turn['turn_id'] == turn_id:\n            current_utterance = turn['utterance']\n            texts.append(current_utterance)\n\n    # Join the texts with \"|||\" separator\n    context = '|||'.join(texts)\n\n    return current_utterance, context\n</code></pre> <p>Now we can use this function to extract the context for a given topic <code>number</code> and <code>turn_id</code> in the topic.</p> <pre><code>number_to_search = \"10-1\"\nturn_id_to_search = 6\nutterance, context = extract_context(topics, number_to_search, turn_id_to_search)\nprint(f\"Raw Utterance: {utterance}\")\nprint(f\"Turn Context: {context}\")\n</code></pre> <p>NOTE: When building context this way, there's a risk that the input can become too lengthy for subsequent interactions, especially in extended discussions. For handling this, you can experiment with various context truncation methods. A straightforward strategy is to eliminate earlier turn utterances and responses if the input size surpasses the model's token limit.</p> <p>Now, let's rewrite the query using our model.</p> <pre><code>def rewrite_query(context: str, model, tokenizer, device) -&gt; str:\n  tokenized_context = tokenizer.encode(context, return_tensors=\"pt\").to(device)\n  output_ids = model.generate(\n      tokenized_context,\n      max_length=200,\n      num_beams=4,\n      repetition_penalty=2.5,\n      length_penalty=1.0,\n      early_stopping=True\n  ).to(device)\n\n  rewrite = tokenizer.decode(output_ids[0], skip_special_tokens=True)\n  return rewrite\n</code></pre> <pre><code>rewrite = rewrite_query(context, rewriter, rewriter_tokenizer, device)\nprint(f\"Raw Utterance: {utterance}\")\nprint(f\"Query Rewrite: {rewrite}\")\n</code></pre> <p>Hmm, that didn't really help! \ud83d\ude1e The rewriter did expand the query but with the wrong information!</p>"},{"location":"demo/#expanding-the-context-using-relevant-ptkb-statements","title":"Expanding the Context using Relevant PTKB Statements","text":"<p>One major difference between iKAT and CAsT is the presence of the Personal Text Knowledge Base (PTKB). In the first year, we are providing the PTKB as a dictionary of statements about the user. Each PTKB defines a user's profile and controls how the system should respond to the user. For the example conversation above, the PTKB, as provided in the test data, is as below.</p> <pre><code>{\n    \"1\": \"I want to know about healthy cooking techniques.\",\n    \"2\": \"I am lactose intolerant.\",\n    \"3\": \"I'm looking for a speaker set to match my TV.\",\n    \"4\": \"I'm willing to drive a long distance to find a cheaper TV.\",\n    \"5\": \"I'm hoping to find some offers and discounts for TV.\",\n    \"6\": \"I like to eat fruits and vegetables.\",\n    \"7\": \"I don't read much.\",\n    \"8\": \"I want to cook healthy and tasty recipes for my family.\",\n    \"9\": \"I am on a diet and prefer low-calorie food.\",\n    \"10\": \"I want to know about the nutritional value of the ingredients I use.\",\n    \"11\": \"I'm looking for a new TV to replace my current one.\",\n    \"12\": \"I want a TV that is okay for light and size of my living room.\"\n},\n</code></pre> <p>Above, we re-wrote the query using the context. But for a more persoanlized conversation, one approach to query rewriting could be to use the PTKB statements in the query reformulation process.</p> <p>To incorporate the PTKB into the system, we must answer two questions:</p> <ol> <li>What are the relevant PTKB statements for the current turn?</li> <li>How do we use these relevant PTKB statements?</li> </ol>"},{"location":"demo/#question-1-what-are-the-relevant-ptkb-statements-for-the-current-turn","title":"Question 1: What are the relevant PTKB statements for the current turn?","text":"<p>In a <code>manual</code> run, you may use the <code>ptkb_provenance</code> fields. This field was manually populated by the iKAT topic developers and provides a straightforward way to identify relevant PTKB statements for the given turn utterance. However, a more difficult (and perhaps interesting) exercise is to automatically identify relevant PTKB statements for the given turn.</p> <p>One easy-to-implement (and probably good) solution is to use <code>BERT</code> embeddings. Specifially, we can use <code>SentenceTransformers</code></p> <p><code>SentenceTransformers</code> is a Python framework designed for sentence, text, and image embeddings. the foundational work on this was presented in the paper titled Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks.</p> <p>This tool enables computation of sentence and text embeddings in over 100 languages. You can then use cosine similarity, for instance, to identify sentences of similar meanings. It's particularly valuable for semantic text similarity, semantic searching, and paraphrase detection.</p> <p>Built on PyTorch and Transformers, the framework boasts a vast array of pre-trained models optimized for diverse tasks. Moreover, fine-tuning your models is a breeze.</p> <p>We are going to use the <code>CrossEncoder</code> model from <code>SentenceTransformers</code> to identify the relevant PTKB statements. Specifically, we are going to re-rank the PTKB statements based on the current utterance.</p> <p>A <code>CrossEncoder</code>-based re-ranker can significantly enhance the end results for users. In this approach, both the query and a potential document are fed into the transformer network concurrently. The network then produces a score between 0 and 1, signifying the document's relevance to the query.</p> <p>The strength of a <code>CrossEncoder</code> lies in its superior performance, stemming from its ability to execute attention operations across both the query and the document.</p> <p>We will use <code>cross-encoder/ms-marco-MiniLM-L-6-v2</code> model from HuggingFace that scores the query and all retrieved passages for their relevancy.</p> <p>For a complete introduction to using cross encoders and retrieval and reranking, see this notebook.</p> <p>First, we need to install the <code>SentenceTransformers</code> library</p> <pre><code>!pip install sentence-transformers\n</code></pre> <p>Next, we write a small function that will rerank the PTKB statements for the given query.</p> <p>The provided Python function, <code>get_ptkb_statements</code>, compares statements from the PTKB with a query to determine their similarity. Here's a step-by-step explanation of the function:</p> <ol> <li> <p>Purpose: The function aims to return the top <code>num_ptkb</code> statements from the PTKB that are most similar to the given <code>query</code>.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>query</code>: The user's input or question.</li> <li><code>num_ptkb</code>: The number of PTKB statements to return.</li> <li><code>ptkb</code>: A dictionary of the PTKB statements.</li> <li><code>reranker</code>: A model that predicts the similarity score between two texts.</li> </ul> </li> <li> <p>Process:</p> <p>a. Calculate Similarity Scores: For each statement in the PTKB, it computes a similarity score with the <code>query</code> using the <code>reranker</code>. The score is between 0 and 1, with 1 being highly similar.</p> <p>b. Pair Statements with Scores: The statements from the PTKB are paired with their respective similarity scores.</p> <p>c. Sort Pairs: The pairs are then sorted in descending order based on their similarity scores.</p> <p>d. Extract Statements: From the sorted pairs, the actual statements are extracted.</p> <p>e. Return Top Statements: The top <code>num_ptkb</code> statements are then concatenated into a single string and returned.</p> </li> <li> <p>Output: A string containing the top <code>num_ptkb</code> statements from the PTKB that are most similar to the given <code>query</code>, separated by spaces.</p> </li> </ol> <pre><code>def get_ptkb_statements(query, num_ptkb, ptkb, reranker):\n    # Find the similarity of PTKB statements with the given query\n    similarity_scores = [reranker.predict([[query, ptkb_statement]])[0] for ptkb_statement in ptkb.values()]\n\n    # Pair each statement with its similarity score\n    statement_score_pairs = list(zip(list(ptkb.values()), similarity_scores))\n\n    # Sort the pairs based on the similarity scores in descending order\n    sorted_pairs = sorted(statement_score_pairs, key=lambda x: x[1], reverse=True)\n\n    # Extract the sorted responses\n    sorted_ptkb_statements = [pair[0] for pair in sorted_pairs]\n\n    # Return required number of PTKB statements\n    return ' '.join(sorted_ptkb_statements[:num_ptkb])\n</code></pre> <p>Now, let's use this function to find the top relevant PTKB statements for a given turn.</p> <pre><code>query = \"Can you compare the first two?\"\nptkb = {\n    \"1\": \"I want to know about healthy cooking techniques.\",\n    \"2\": \"I am lactose intolerant.\",\n    \"3\": \"I'm looking for a speaker set to match my TV.\",\n    \"4\": \"I'm willing to drive a long distance to find a cheaper TV.\",\n    \"5\": \"I'm hoping to find some offers and discounts for TV.\",\n    \"6\": \"I like to eat fruits and vegetables.\",\n    \"7\": \"I don't read much.\",\n    \"8\": \"I want to cook healthy and tasty recipes for my family.\",\n    \"9\": \"I am on a diet and prefer low-calorie food.\",\n    \"10\": \"I want to know about the nutritional value of the ingredients I use.\",\n    \"11\": \"I'm looking for a new TV to replace my current one.\",\n    \"12\": \"I want a TV that is okay for light and size of my living room.\"\n}\nnum_ptkb = 3\n</code></pre> <pre><code>from sentence_transformers import CrossEncoder\nreranker = CrossEncoder('cross-encoder/ms-marco-MiniLM-L-6-v2')\nptkb_statements = get_ptkb_statements(query, num_ptkb, ptkb, reranker)\nptkb_statements\n</code></pre>"},{"location":"demo/#question-2-how-do-we-use-these-relevant-ptkb-statements","title":"Question 2: How do we use these relevant PTKB statements?","text":"<p>One possible way of using these relevant PTKB statements is to include them in the context when re-writing the query.</p> <p>Let's see how that works. We will modify out previous function <code>extract_context</code> a little to include the relevant PTKB statements.</p> <pre><code>def extract_context_with_ptkb_statements(json_data, number, turn_id, ptkb_statements):\n    # Find the correct dictionary with the given number\n    data = None\n    for item in json_data:\n        if item['number'] == number:\n            data = item\n            break\n\n    # If we couldn't find the data for the given number\n    if not data:\n        print(\"No data found for the given number.\")\n        return \"No data found for the given number.\"\n\n    # Extract the utterance and response values\n    texts = [ptkb_statements]\n    current_utterance = \"\"\n    for turn in data['turns']:\n        if turn['turn_id'] &lt; turn_id:\n            texts.append(turn['utterance'])\n            texts.append(turn['response'])\n        elif turn['turn_id'] == turn_id:\n            current_utterance = turn['utterance']\n            texts.append(current_utterance)\n\n    # Join the texts with \"|||\" separator\n    context = '|||'.join(texts)\n\n    return current_utterance, context\n</code></pre> <pre><code>number_to_search = \"10-1\"\nturn_id_to_search = 6\nutterance, context = extract_context_with_ptkb_statements(topics, number_to_search, turn_id_to_search, ptkb_statements)\nprint(f\"Raw Utterance: {utterance}\")\nprint(f\"Turn Context: {context}\")\n</code></pre> <pre><code>rewrite = rewrite_query(context, rewriter, rewriter_tokenizer, device)\nprint(f\"Query Rewrite: {rewrite}\")\n</code></pre> <p>That didn't help either! \ud83d\ude1e</p> <p>This is a really difficult query for the system! We are excited \ud83e\udd29 to see how your system handles such queries.</p> <p>Alternatively, we can also append the PTKB statements to the rewritten query (without PTKB statements).</p>"},{"location":"demo/#passage-retrieval-and-reranking","title":"Passage Retrieval and Reranking","text":"<p>In iKAT 2023, we provide several tasks, see the guidelines section of the webpage for more details.</p> <p>One core task in iKAT 2023 involves producing a ranked list of relevant passages corresponding to a specific user utterance. During the Passage Retrieval phase, we employ the rephrased query (either manually or automatically adjusted) to fetch a potential set of passages from the previously generated sparse index.</p> <p>The retrieve-then-rerank approach is a widely adopted strategy in Information Retrieval systems, aimed at enhancing the quality of the preliminary set of candidates. The process commences with a swift and effective retrieval method to fetch the initial set of passages. One prevalent method for this is BM25. However, there's also the option of adopting dense retrieval methods like Bi-encoders. For a comprehensive understanding of utilizing bi-encoders in retrieval, consider checking this guide.</p> <p>Subsequent to this initial retrieval, the candidate set undergoes a reranking process, leveraging more advanced methods. An example would be rerankers rooted in BERT, known as cross-encoders. In this tutorial, we'll specifically employ the <code>CrossEncoder</code> from the <code>SentenceTransformers</code> library.</p>"},{"location":"demo/#step-1-retrieval-using-bm25","title":"Step-1: Retrieval using BM25","text":"<p>We will first retrieve a candidate set of passages from our index using BM25. As query, we will use the manually resolved utterance from <code>turn_id=6</code> in the example shown above.</p> <pre><code>def retrieve_using_bm25(query):\n    hits = searcher.search(query)\n    candidate_set = []\n    for i in range(len(hits)):\n        print('Rank: {} | PassageID: {} | Score: {}'.format(i+1, hits[i].docid, hits[i].score))\n        doc = searcher.doc(hits[i].docid)\n        parsed_doc = json.loads(doc.raw())\n        print(parsed_doc['contents'])\n        candidate_set.append({\n            'passage_id': hits[i].docid,\n            'bm25_rank': i+1,\n            'bm25_score': hits[i].score,\n            'passage_text': parsed_doc['contents']\n        })\n        print('=================================')\n    return candidate_set\n</code></pre>"},{"location":"demo/#step-2-rerank-using-crossencoder","title":"Step-2: Rerank using CrossEncoder","text":"<p>Next, we will rerank this candidate set using the <code>CrossEncoder</code> defined earlier.</p> <pre><code>def rerank_passages(query, passages, reranker):\n    res = []\n    query_passage_pairs = [[query, passage['passage_text']] for passage in passages]\n    scores = reranker.predict(query_passage_pairs)\n\n    for passage, score in zip(passages, scores):\n        passage['reranker_score'] = score\n        res.append(passage)\n\n    ranked_passages = sorted(passages, key=lambda x: x['reranker_score'], reverse=True)\n    return ranked_passages\n</code></pre> <pre><code>query = \"Can you compare mozzarella with plant-based cheese?\"\ncandidate_set = retrieve_using_bm25(query)\n</code></pre> <pre><code>import numpy as np\nreranked_passages = rerank_passages(query, candidate_set, reranker)\nprint(json.dumps(reranked_passages, indent=4, default=lambda o: float(o) if isinstance(o, np.float32) else o))\n</code></pre> <p>These results are not great. An important thing to note here is that we are doing retrieval over a very small corpus of <code>SimpleEnglishWikipedia</code>. As mentioned earlier, the results may not be of high quality.</p>"},{"location":"demo/#response-generation","title":"Response Generation","text":"<p>One of the tasks in iKAT 2023 is response generation. After retrieval, the system should use the top-K passages to generate a short response (250 words or less) that is appropriate for an interactive conversational agent to give to the user.</p> <p>Let's explore one way this can be done, by framing the task as a summarisation problem. We will use the <code>T5</code> model for this purpose. Specifically, we will use the <code>mrm8488/t5-base-finetuned-summarize-news</code> model from HuggingFace.</p> <p>The <code>mrm8488/t5-base-finetuned-summarize-news</code> is Google's <code>T5-base</code> model fine-tuned on the News Summary dataset for the downstream task of summarization.</p> <p>First, we will write a short function for this task.</p> <p>The <code>generate_response</code> function is described below:</p> <ol> <li> <p>Purpose: Generates a summarized response based on the top passages from a set of documents returned by a search operation.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>passages</code>: A set of top documents or hits returned by the search operation.</li> <li><code>model</code>: An instance of a pre-trained sequence-to-sequence language model (from the <code>AutoModelForSeq2SeqLM</code> class) for generating summaries.</li> <li><code>tokenizer</code>: An instance of a tokenizer (from the <code>AutoTokenizer</code> class) used to tokenize and decode text.</li> </ul> </li> <li> <p>Process:</p> <p>a. Consolidating Passages: Combines all the extracted passages into one continuous string.</p> <p>b. Tokenization and Input Formation: Tokenizes the combined text and pre-processes it by adding a \"summarize: \" prefix. The tokenized input is adjusted to not exceed a specified maximum length (512 tokens) and is moved to the desired computation device.</p> <p>c. Generating Summary: Utilizes the sequence-to-sequence language model to generate a summarized response based on the input. Applies various parameters to control and improve the quality of the output summary.</p> <p>d. Decoding the Summary: Transforms the token IDs from the generated summary back into human-readable text, ensuring any special tokens are omitted.</p> </li> <li> <p>Output: Returns a coherent and summarized text derived from the top passages of the documents.</p> </li> </ol> <pre><code>def generate_response(passages, model, tokenizer):\n    text = ' '.join(passages)\n    inputs = tokenizer.encode(\"summarize: \" + text, return_tensors=\"pt\", max_length=512, truncation=True)\n    with torch.no_grad():\n        summary_ids = model.generate(\n            inputs,\n            max_length=250,\n            min_length=50,\n            length_penalty=2.0,\n            num_beams=4,\n            early_stopping=True\n        )\n    summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)\n    return summary\n</code></pre> <pre><code>summarizer = AutoModelForSeq2SeqLM.from_pretrained('mrm8488/t5-base-finetuned-summarize-news')\nsummarizer_tokenizer = AutoTokenizer.from_pretrained('mrm8488/t5-base-finetuned-summarize-news')\n</code></pre> <pre><code># We use the top-3 reranked passages to generate a response\npassages = [passage['passage_text'] for passage in reranked_passages][:3]\nprint(json.dumps(passages, indent=4))\n</code></pre> <pre><code>generate_response(passages, summarizer, summarizer_tokenizer)\n</code></pre>"},{"location":"guidelines/","title":"Guidelines for iKAT 2025 Year 3","text":"<p>The guidelines for iKAT 2024 (year 2) are now available as a Google Doc.</p> <p>The guidelines for iKAT 2023 (year 1) are also available as a Google Doc.</p>"},{"location":"guidelines/#participation","title":"Participation","text":"<p>Participants must register to submit. To request a late registration, please email trec@nist.gov requesting a registration key. The dissemination form must be returned to submit runs.</p> <p>As a result of the registration, participants will receive an access token with which participants can authenticate themselves to be able to use the simulation API in order to participate in the interactive task. </p>"},{"location":"guidelines/#motivation","title":"Motivation","text":"<p>The TREC Interactive Knowledge Assistance Track (iKAT) aims to advance research on collaborative information-seeking conversational agents that generate personalized responses by leveraging information learned about the user. </p> <p>In iKAT, the conversation progresses not only based on prior system responses but also on personal user information. As a result, given the same topic, users with different profiles may follow distinct conversational paths, influencing acceptable system responses for the same underlying information need. With the advent of large language models (LLMs), this task is especially timely\u2014raising new challenges in integrating personalization through context-aware prompting, dynamic interaction, and mixed-initiative dialogue. </p>"},{"location":"guidelines/#track-overview","title":"Track Overview","text":"<p>In iKAT, the next turn of a conversation is influenced by the following aspects. </p> <ol> <li>The previous responses from the system and utterances from the user. </li> <li>The given persona of the user. </li> <li>The information revealed by the user during the conversation (background, perspective, previous conversations, and context).  </li> </ol> <p>The persona of the user and their corresponding information needs dictate the direction of a conversation. Each user is assigned a distinct persona and will engage in multiple conversations across different topics. For different users, different system responses are acceptable, which demonstrates the personalized nature of the conversations. To this end, the persona and the information needs of the user are modeled by generating a Personal Textual Knowledge Base (PTKB) which is available to the system during the conversation.  </p>"},{"location":"guidelines/#whats-new","title":"What\u2019s New?","text":"<ul> <li>Interactive Submissions: In Year 3, iKAT is introducing interactive submissions where participants are given access to an API endpoint and will be interacting with a live simulation system on each topic. More details can be found here. </li> <li>Multiple dialogues per user persona: To make the task more realistic and challenging, we are including multiple dialogues per user. This will require long-term memory or dynamic PTKB modeling by the participants to effectively address the user\u2019s needs spread across multiple dialogues. </li> <li>Dynamic PTKBs: As also mentioned earlier, this year\u2019s edition will encourage teams to actively extract and store new PTKB statements from the dialogues to be able to use them in the future dialogues. More details can be found here. </li> </ul>"},{"location":"guidelines/#task-overview","title":"Task Overview","text":"<p>In Year 3, the following inputs are provided to the participants at each conversation turn: </p> <ol> <li>Personal Text Knowledge Base (PTKB);</li> <li>Conversation history (user utterance and system response for previous turns);</li> <li>The current user utterance.</li> </ol>"},{"location":"guidelines/#submission-classes","title":"Submission Classes","text":"<p>We offer the following tasks:</p>"},{"location":"guidelines/#offline-submissions","title":"Offline Submissions","text":"<ul> <li>Passage Ranking &amp; Response Generation: For each turn, retrieve and rank relevant passages from the given collection in response to the last user utterance. Then use the ranked passages to generate and return a set of responses, for example using a Retrieval-Augmented Generation (RAG) pipeline. All responses must have at least one passage called \u201cprovenance\u201d from the collection.</li> <li>(Only) Response Generation: For each turn, given a ranked list of passages, return a set of responses. Hence, in this task, you are provided with the passage provenances and you do not have to do any ranking. You will only submit the generated responses for each conversational turn. </li> </ul>"},{"location":"guidelines/#new-interactive-submissions","title":"(New!!) Interactive Submissions","text":"<ul> <li>Passage Ranking &amp; Interactive Response Generation: For each real-time simulated user turn, retrieve and rank relevant passages from the given collection. Then use the ranked passages to generate a personalized response. This response will be passed back to the simulated user, which again produces an utterance. This process will be repeated until the user terminates the conversation. </li> </ul> <p>For both submission types (offline and interactive) we also offer the PTKB Classification Task:  </p> <ul> <li>PTKB Statement Classification: For each turn, given the PTKB, return a list of the relevant PTKB statements. This task is essentially a binary classification task. So, the output required is a list of relevant statements from the PTKB. </li> </ul> <p>We will provide baseline passage ranking and response generation methods for each of the tasks.</p> <p>Note: We do not have manual submission runs this year.</p>"},{"location":"guidelines/#example-dialogue-tree","title":"Example Dialogue Tree","text":"<p>An example of two different conversations based on different personas for the same topic is shown in the following figure. For each user turn, systems should return a ranked list of text responses. Each response has one or more (ranked) source passages as provenance. In addition, the systems should provide a sorted list of relevant statements of PTKB with the corresponding relevance score.</p> <p></p> <p>Below, we provide a detailed explanation of the above diagram. </p> Turn Field Value Topic 1-1, PTKB_1 1 User utterance I want to start my master\u2019s degree, can you help me with finding a university?  Response Do you want to continue your bachelor\u2019s studies and obtain a degree in computer science?  Citations Null Relevant PTKBs <ul> <li>I have a bachelor\u2019s degree in computer science from Tilburg University</li> </ul> 2 User utterance Yes, I want to continue my studies in computer science. Response Do you want to study abroad? Citations Null Relevant PTKBs <ul> <li>I live in the Netherlands</li> </ul> 3 User utterance No, I don't want to go abroad. Response          I can help you find a university to continue your studies in the Netherlands as a computer science student. Take a look at these Top Computer Science Universities in the Netherlands:         <ul> <li>Delft University of Technology.</li> <li>Eindhoven University of Technology.</li> <li>Vrije Universiteit Amsterdam.</li> <li>University of Amsterdam.</li> <li>Leiden University.</li> <li>Radboud University.</li> <li>Utrecht University.</li> <li>University of Twente.</li> </ul> Citations clueweb22-en0034-09-03452:0 Relevant PTKBs <ul> <li>I live in the Netherlands</li> <li>I have a bachelor\u2019s degree in computer science from Tilburg University</li> </ul> 4 User utterance Which are the best three? Response          Based on the ranking of research.com the top three universities are as follows:          <ol> <li>Delft University of Technology.</li> <li>University of Amsterdam.</li> <li>Eindhoven University of Technology.</li> </ol> Citations clueweb22-en0016-21-09213:0  Relevant PTKBs <ul> <li>I live in the Netherlands</li> <li>I have a bachelor\u2019s degree in computer science from Tilburg University</li> </ul> Topic 1-2, PTKB_2 1 User utterance I want to start my master\u2019s degree, can you help me with finding a university?  Response          Sure, do you want to study computer science?      Citations Null Relevant PTKBs <ul> <li>I have a bachelor\u2019s degree in computer science with a GPA of 3.3 out of 4.0 </li> </ul> 2 User utterance Yes, I want to pursue my education in computer science. Can you tell me the names of the best universities? Response          Here are the best universities for computer science in Canada:          <ol> <li>University of British Columbia</li> <li>University of Alberta</li> <li>Concordia University</li> <li>Simon Fraser University</li> <li>The University of Toronto</li> </ol> Citations clueweb22-en0026-31-15538:1 clueweb22-en0026-31-15538:4clueweb22-en0026-31-15538:6clueweb22-en0040-41-06056:0 Relevant PTKBs <ul> <li>I have a bachelor\u2019s degree in computer science with a GPA of 3.3 out of 4.0</li> <li>I\u2019m moving to Canada to study master</li> </ul> 3 User utterance Which of them best suits me in terms of weather conditions? Response          University of British Columbia in Vancouver has temperatures near 80 degrees Fahrenheit (27 degrees Celsius) in summer and up to 45 degrees Fahrenheit (about 7 degrees Celsius) in winter which is suitable for you.         The University of Toronto is acceptable since it has cold winters, average temperatures can drop below -10 \u00b0 C but not below 12 degrees for long.         The Concordia University in Montreal is not suitable for you since in the winter, it could reach minus 40 with the wind chill.          The University of Alberta is also not suitable for you. In winter the average temperature varies between -6.5\u00b0C (20.3\u00b0F) and -13.5\u00b0C (7.7\u00b0F).          Simon Fraser University is not acceptable to you. The city in which the university is located will reach temperatures of -14 in the winter.      Citations clueweb22-en0000-94-02275:0 clueweb22-en0027-06-08704:1 clueweb22-en0005-63-12144:0 clueweb22-en0013-01-17558:1 clueweb22-en0014-39-04143:0 Relevant PTKBs <ul> <li>I cannot withstand the temperatures below -12 for a long time </li> <li>I\u2019m used to heavy rains in the Netherlands</li> </ul> 4 User utterance Can you tell me more about the University of Toronto? Response          Sure, what do you want to know about? Do you want to know about its campus, community, or programs?       Citations Null Relevant PTKBs          Null"},{"location":"guidelines/#primary-task-details","title":"Primary Task Details","text":"<p>The main aim of iKAT can be defined as personalized retrieval-based \u201ccandidate response generation\u201d in the context of a conversation and a set PTKB statements. A detailed explanation of the subtasks is provided in the following. </p>"},{"location":"guidelines/#ptkb-statement-provenance-classification","title":"PTKB Statement (provenance) Classification","text":"<ul> <li>This task is a binary classification problem. The output is a list of the statements from PTKB that are relevant for responding to the user\u2019s utterance. </li> <li>The provenance PTKB statements can be an empty list for some responses.</li> <li>The PTKB statements can be taken from the given list of PTKB statements, or extracted from previous user conversations. </li> <li>(New!!) New PTKB statements can be extracted from the previous conversations and mentioned in the list of relevant PTKB statements. </li> </ul>"},{"location":"guidelines/#passage-ranking-citation","title":"Passage Ranking (citation)","text":"<ul> <li>The provided context for passage ranking per each user utterance includes:<ul> <li>A fixed set of previous utterances and responses in the preceding turns up to the current step, </li> <li>PTKB of the user provided at the beginning of the conversation, </li> <li>The previous conversation of the same user with the system. Note: this information is only important for a better (or updated) understanding of the persona of the user and the information need of the user in the current turn is not dependent on the previous conversations.</li> </ul> </li> <li>Note: Using information from 1) following turns and 2) the relevant PTKB statements from previous turns is not allowed.  </li> <li>A run must include the provenance passages retrieved by the retrieval model (called \u201creferences\u201d in the submission format) for all turns of the conversation. </li> <li>The \u201creference\u201d field is a list of the top 1000 passages retrieved by the retrieval model based on their relevance. The passages must be included in this field using the format <code>doc_id:passage_id</code>.</li> <li>The first 1000 provenance passages for each turn will be assessed.</li> <li>Note: for each turn of the conversation, there is only one \u201creference\u201d field in the submission format. This means that the participants are only allowed to submit one ranked list of the passages for each turn. </li> </ul>"},{"location":"guidelines/#response-generation","title":"Response Generation","text":"<ul> <li>Each response can be generated from multiple passages. It can be an abstractive or extractive summary of the corresponding passages, or a text generated by a Retrieval-Augment Generation (RAG) model. </li> <li>Each response must have one or more passages as provenance from the collection used to produce it. </li> <li>A run can have multiple responses for each turn. We will assess just the first response (or the response with \u201crank=1\u201d) for each turn. </li> <li>The passages used for generating each response must be mentioned in the \u201ccitations\u201d field using the format <code>doc_id:passage_id</code>.  </li> <li>We will not evaluate the responses without any provenance passages (i.e. an empty list of \u201ccitations\u201d). </li> <li>Because a response may have multiple source passages, the score of passages in the citations list for a response is used to order passages in descending order. </li> <li>A response is a text suitable for showing to the user. It should be fluent, satisfy their information needs, and not contain extraneous or redundant information.  </li> <li>A response is limited to a maximum of 250 words (as measured by the <code>Tokenizer</code> function of <code>spacy.tokenizer</code> in spaCy v3.3 library) but should vary depending on an appropriate query-response. </li> </ul>"},{"location":"guidelines/#new-interactive-response-generation","title":"(New!!) Interactive Response Generation","text":"<ul> <li>Conversations in this task are always user initiated. After submitting run meta information to the simulation API, participants receive the first user utterance.</li> <li>Participant systems should retrieve relevant passages from the collection based on the utterance and generate a response. The ranked list of passages and the generated response should be sent back to the simulation API.</li> <li>Sending back the passages and the response results in a new user utterance provided by the API on the same topic to which the participant system should respond again.</li> <li>This process is repeated until the user indicates (through a flag, <code>last_response_of_session</code>) that they terminate the current session.</li> <li>The next request of a participant system then leads to a user utterance for a new session on a new topic with a (potential) new user.</li> <li>This process is repeated until all topics in the test set have been addressed, which will also be indicated through a flag in the API. </li> <li>After all topics have been addressed, the run counts as submitted (no additional submission of a run file required).   </li> <li>Responses from the simulation API contain identifiers to differentiate with which user the participants system currently talks with. This allows participants to track PTKB statements of reoccurring users. If participants track PTKB statements they can provide relevant statements through the API as well.</li> <li>Responses for this task should satisfy the same properties as for the (non-interactive) response generation task. </li> <li>This task invites participants to apply various techniques to clarify information needs like asking clarifying questions or preference elicitation.  Note: Attempts at jailbreaking to reveal system details or to try to make the user simulator behave in an unintended way will result in disqualification.</li> </ul> <p>Technical documentation on how to operate the simulation API can be found here.</p>"},{"location":"guidelines/#api-output-example","title":"API Output Example","text":"<pre><code>{ \n  \"timestamp\":\"2025-05-06T10:58:33.400920\", \n  \"run_id\":\"my_best_run_02\", \n  \"topic_id\":\"1-1\", \n  \"user_id\":\"f3333f5c-8313-4941-beea-f24de25a583a\", \n  \"utterance\":\"Show me universities with computer science programs.\", \n  \"history\":[ \n    { \n      \"role\":\"user\", \n      \"content\":\"Show me universities with computer science programs.\" \n    } \n  ], \n  \"last_response_of_session\":false, \n  \"last_response_of_run\":false \n} \n</code></pre>"},{"location":"guidelines/#api-input-example","title":"API Input Example","text":"<pre><code>{ \n  \"run_id\":\"my_best_run_02\", \n  \"response\":\"There is University of Amsterdam.\", \n  \"citations\":{ \n    \"clueweb22-en0032-04-00208:7\":0.8, \n    \"clueweb22-en0027-84-11778:0\":0.4 \n  }, \n  \"relevant_ptkbs\":[ \n    \"I live in the Netherlands.\" \n  ] \n} \n</code></pre>"},{"location":"guidelines/#collection","title":"Collection","text":"<p>The text collection contains a subset of ClueWeb22 documents, prepared by the organizers in collaboration with CMU. Documents have then been split into ~116M passages. The goal is to retrieve passages from target open-domain text collections. </p>"},{"location":"guidelines/#license-for-clueweb22-b","title":"License for ClueWeb22-B","text":"<p>Getting the license to use the collection can be time-consuming and would be handled by CMU, not the iKAT organizers. Please follow these steps to get your data license ASAP: </p> <ul> <li> <p>Sign the license form available on the ClueWeb22 project web page and send the form to CMU for approval (clueweb@andrew.cmu.edu).</p> </li> <li> <p>Once you have the license, send a mail to Andrew Ramsay (andrew.ramsay@glasgow.ac.uk) to have access to a download link with the preprocessed iKAT passage collection, and other resources such as Lucene and SPLADE indices. </p> </li> </ul> <p>Please give enough time to the CMU licensing office to accept your request.</p> <ul> <li>CMU requires a signature from the organization (i.e., the university or company), not an individual who wants to use the data. This can slow down the process at your end too. So, it\u2019s useful to start the process ASAP.</li> <li>If you already have an accepted license for ClueWeb22, you do not need a new form. Please let us know if that is the case.</li> <li>As an alternative for (2), once you have access to ClueWeb22, you can get the raw ClueWeb22-B/iKAT collection yourself with the license, and do all passage-segmentation yourself, but we advise you to use our processed version to avoid any error.</li> </ul> <p>Please do feel free to reach out to us if you have any questions or doubts about the process, so we can prevent any delays in getting the data to you.</p>"},{"location":"guidelines/#passage-segmentation","title":"Passage Segmentation","text":"<p>For assessment, we will judge provenance passages. We segment the documents in our collection into passages in a similar manner as done by the TREC Deep Learning track for segmenting MS MARCO documents into passages: First, each document is trimmed to 10k characters. Then a 10-sentence sliding window with a 5-sentence stride is used to generate the passages.  </p> <p>An example document with some passage segmentation is provided in TrecWeb format below for illustration purposes: </p> <pre><code>&lt;DOC&gt;\n    &lt;DOCNO&gt;clueweb22-en0020-70-00000&lt;/DOCNO&gt;\n    &lt;DOCHDR&gt;&lt;/DOCHDR&gt;\n    &lt;HTML&gt;\n        &lt;TITLE&gt;06AECE252028B717019F2802EB065B68&lt;/TITLE&gt;\n        &lt;URL&gt;https://pokemon.fandom.com/wiki/Donphan&lt;/URL&gt;\n        &lt;BODY&gt;\n            &lt;PASSAGE id=0&gt;\n                It has thin, elongated ears held out almost perpendicular to its\n                body. Its four short legs...\n            &lt;/PASSAGE&gt;\n            &lt;PASSAGE id=1&gt;\n                It has been demonstrated that Donphan has a keen sense of smell,\n                capable of sniffing out a gem known as amberite. Donphan...\n            &lt;/PASSAGE&gt;\n        &lt;/BODY&gt;\n    &lt;/HTML&gt;\n&lt;/DOC&gt;\n</code></pre>"},{"location":"guidelines/#provided-clueweb22-indices","title":"Provided ClueWeb22 Indices","text":"<p>As of now, our resource includes a BM25 Pyserini index of the collection, and a SPLADE index of the collection. </p> <p>The SPLADE index was made with the numba library, as in the original SPLADE github, and can be re-used for retrieval. It uses the SPLADE++ model. </p>"},{"location":"guidelines/#topics","title":"Topics","text":"<p>We will provide several sample topics with example baseline runs for validation and testing. Below is a sample topics file from two different personas on the same topic. The <code>conv_id</code> represents a concatenation of the persona and topic id <code>&lt;persona_id&gt;-&lt;topic_id&gt;</code>. Also, a <code>citation</code> field with a list of provenance passages and a <code>ptkb_provenance</code> field with a list of provenance statements from PTKB are included. These two fields define the trajectory of the conversation and should be used for generating responses in the offline response generation task.  </p> <pre><code>[\n  {\n    \"conv_id\": \"1-1\",\n    \"title\": \"Finding a University\",\n    \"ptkb\": [\n      \"I graduated from Tilburg University.\",\n      \"I live in the Netherlands.\",\n      \"I'm allergic to peanuts.\",\n      \"I worked as a web developer for 2 years.\",  \n      \"I have a bachelor's degree in computer science.\",  \n      \"I like Indian food.\",  \n      \"My bachelor's GPA is 5.6.\",  \n      \"I'm 26 years old.\",  \n      \"My TOEFL SCORE is 91.\",  \n      \"My interesting bachelor courses are data structure, algorithm, data mining, and artificial intelligence.\",  \n      \"I didn't like computer architecture and logical circuits courses.\"  \n    ],  \n    \"responses\": [  \n      {  \n        \"turn_id\": 1,  \n        \"user_utterance\": \"I want to start my master's degree, can you help me with finding a university?\",  \n        \"resolved_utterance\": \"I want to start my master's degree, can you help me with finding a university?\",  \n        \"response\": \"Do you want to continue your bachelor's studies and obtain a degree in computer science?\",  \n        \"ptkb_provenance\": [  \n          \"I have a bachelor's degree in computer science.\" \n        ],\n        \"citations\": [  \n          \"clueweb22-en0034-09-03452:1\",  \n          \"clueweb22-en0034-09-03452:3\",  \n          \"clueweb22-en0034-09-03452:5\",  \n          \"clueweb22-en0034-09-03452:7\",  \n          \"clueweb22-en0034-09-03452:9\"  \n        ]  \n      },  \n      {  \n        \"turn_id\": 2,  \n        \"user_utterance\": \"Yes, I want to continue my studies in computer science.\",  \n        \"resolved_utterance\": \"Yes, I want to continue my studies in computer science.\",  \n        \"response\": \"Do you want to study in the Netherlands, Europe, or somewhere further away?\",  \n        \"ptkb_provenance\": [  \n          \"I live in the Netherlands.\" \n        ],\n        \"citations\": [  \n          \"clueweb22-en0034-09-03452:2\",  \n          \"clueweb22-en0034-09-03452:4\",  \n          \"clueweb22-en0034-09-03452:6\",  \n          \"clueweb22-en0034-09-03452:8\",  \n          \"clueweb22-en0034-09-03452:10\"  \n        ]  \n      },  \n      {  \n        \"turn_id\": 3,  \n        \"user_utterance\": \"I'd like to stay here.\",  \n        \"resolved_utterance\": \"I'd like to stay in the Netherlands.\",  \n        \"response\": \"I can help you with finding a university for continuing your studies in the Netherlands as a computer science student. Take a look at these Top Computer Science Universities in the Netherlands: Delft University of Technology, Eindhoven University of Technology, Vrije Universiteit Amsterdam, University of Amsterdam, Leiden University, Radboud University, Utrecht University, University of Twente\",  \n        \"ptkb_provenance\": [  \n            \"I have a bachelor's degree in computer science.\", \n            \"I live in the Netherlands.\" \n        ],\n        \"citattions\": [  \n          \"clueweb22-en0012-00-00012:0\",  \n          \"clueweb22-en0012-00-00012:1\",  \n          \"clueweb22-en0012-00-00012:2\",  \n          \"clueweb22-en0012-00-00012:3\",  \n          \"clueweb22-en0012-00-00012:4\"  \n        ]  \n      }  \n    ]  \n  },  \n  {  \n    \"conv_id\": \"2-2\",  \n    \"title\": \"Finding a university\",  \n    \"ptkb\": [  \n     \"I don't like crazy cold weather.\",  \n      \"I don't have a driver's license.\",  \n      \"I plan to move to Canada.\",  \n      \"I'm from the Netherlands.\",  \n      \"I'm used to heavy rains in the Netherlands.\",  \n      \"I graduated from UvA.\",  \n      \"I have bachelor's degree in computer science.\",  \n      \"I speak English fluently.\"  \n    ],  \n    \"responses\": [  \n      {  \n        \"turn_id\": 1,  \n        \"user_utterance\": \"I want to start my master's degree, can you help me with finding a university?\",  \n        \"resolved_utterance\": \"I want to start my master's degree, can you help me with finding a university in Canada?\",  \n        \"response\": \"Sure, do you want to study computer science?\",  \n        \"ptkb_provenance\": [  \n          \"I have bachelor's degree in computer science.\",   \n          \"I plan to move to Canada.\" \n        ],\n        \"citations\": [  \n          \"clueweb22-en0040-41-06056:0\",  \n          \"clueweb22-en0040-41-06056:1\",  \n          \"clueweb22-en0040-41-06056:2\",  \n          \"clueweb22-en0040-41-06056:3\",  \n          \"clueweb22-en0040-41-06056:4\"  \n        ]  \n      },  \n      {  \n        \"turn_id\": 2,  \n        \"user_utterance\": \"Yes, I want to pursue the same major. Can you tell me the name of the best universities?\",  \n        \"resolved_utterance\": \"Yes, I want to pursue computer science. Can you tell me the name of the best computer science universities in Canada?\",  \n        \"response\": \"Here are the top universities for computer science in Canada: 1) University of British Columbia, 2) University of Alberta, 3) Concordia University, 4) Simon Fraser University, 5) The University of Toronto\",  \n        \"ptkb_provenance\": [],  \n        \"citations\": [  \n          \"clueweb22-en0026-31-15538:1\",  \n          \"clueweb22-en0026-31-15538:4\",  \n          \"clueweb22-en0026-31-15538:6\",  \n          \"clueweb22-en0040-41-06056:0\"  \n        ]\n      },  \n      {  \n        \"turn_id\": 3,  \n        \"user_utterance\": \"Which of them best suits me in terms of weather conditions?\",  \n        \"resolved_utterance\": \"Which of the following universities best suits me in terms of weather conditions? 1) the University of British Columbia, 2) the University of Alberta, 3) Concordia University, 4) Simon Fraser University, and 5) The University of Toronto.\",  \n        \"response\": \"I know you don't like very cold weather, but can you give me an estimation of the temperature that is acceptable for you?\",  \n        \"ptkb_provenance\": [  \n          \"I don't like crazy cold weather.\",  \n          \"I'm used to heavy rains in the Netherlands.\" \n        ],\n        \"citations\": [  \n          \"clueweb22-en0030-30-30030:0\",  \n          \"clueweb22-en0030-30-30030:1\",  \n          \"clueweb22-en0030-30-30030:2\",  \n          \"clueweb22-en0030-30-30030:3\",  \n          \"clueweb22-en0030-30-30030:4\"  \n        ]  \n      }  \n    ]  \n  }  \n]\n</code></pre>"},{"location":"guidelines/#sample-topics","title":"Sample Topics","text":"<p>We are releasing two sample conversations on the topic \"Finding a University\". Each conversation pertains to a different persona, and the conversation is personalized to that persona. You can find the sample topic here.  </p> <p>Those eager to start developing and experimenting can also use the data from previous years of TREC CAsT and TREC iKAT 2023 and 2024 that is available here. </p>"},{"location":"guidelines/#task-submissions","title":"Task Submissions","text":"<p>Participants submit the output of their system on the specified \u201ctest\u201d topics.  A single participant can submit a maximum of: </p> <ul> <li>4 automatic runs, </li> <li>2 generation-only runs,</li> <li>2 interactive runs.</li> </ul> <p>In the automatic runs, the participants can include response generation based on their own ranking, but this is not mandatory.</p> <p>In the generation-only run, the participants must use the given passage provenances. </p> <p>We have three submission classes for each of the 1) automatic, 2) generation-only, and 3) interactive tasks. An example of the submission template for each class of submission is below.  </p>"},{"location":"guidelines/#sample-submission-for-the-offline-task","title":"Sample submission for the offline task","text":"<pre><code>{ \n  \"metadata\":{ \n    \"team_id\":\"my_favourite_team\", \n    \"run_id\":\"my_best_run_02\", \n    \"run_type\":\"automatic\"\n  },\n  \"turn_id\":\"1-2_3\", \n  \"responses\":[ \n    { \n      \"rank\":1, \n      \"text\":\"The University of British Columbia in Vancouver has temperatures near 80 degrees Fahrenheit (27 degrees Celsius) in summer and up to 45 degrees Fahrenheit (about 7 degrees Celsius) in winter which is suitable for you. The university of Toronto is acceptable since has cold winters, average temperatures can drop below -10 \u00b0 C but not below 12 degrees for long. The Concordia university in Montreal is not suitable for you since in the winter, could reach minus 40 with the wind chill. University of Alberta is also not suitable for you. In winter the average temperature varies between -6.5\u00b0C (20.3\u00b0F) and -13.5\u00b0C (7.7\u00b0F). Simon Fraser university is not acceptable for you. The city which the university is located in will reach temperatures of -14 in the winter.\", \n      \"citations\":{ \n        \"clueweb22-en0000-94-02275:0\":0.6, \n        \"clueweb22-en0027-06-08704:1\":0.5, \n        \"clueweb22-en0005-63-12144:0\":0.4 \n                  }, \n      \"ptkb_provenance\":[ \n        \"I cannot withstand the temperatures below -12 for a long time\", \n        \"I\u2019m used to heavy rains in the Netherlands\" \n      ] \n    }, \n    { \n      \"rank\":2, \n      \"text\":\" The University of British Columbia and Simon Fraser University are the best fits, as Vancouver's mild, rainy winters are similar to the Netherlands. The University of Toronto is colder and snowier but still manageable. Concordia University and the University of Alberta have much harsher winters and would likely feel too cold for your preferences. \", \n      \"citations\":{ \n        \"clueweb22-en0001-23-18493:4\":0.8, \n        \"clueweb22-en0028-93-98372:9\":0.3 \n      }, \n      \"ptkb_provenance\":[ \n        \"I cannot withstand the temperatures below -12 for a long time\", \n        \"I\u2019m used to heavy rains in the Netherlands\" \n      ]\n     }\n  ], \n  \"references\": {\n      \"clueweb22-en0000-94-02275:0\": 0.6,\n      \"clueweb22-en0027-06-08704:1\": 0.5,\n      \"clueweb22-en0005-63-12144:0\": 0.4,\n      \"clueweb22-en0001-23-18493:4\": 0.8,\n      \"clueweb22-en0028-93-98372:9\": 0.3\n  } \n }\n</code></pre> <ul> <li>The <code>run_id</code> is a run submission identifier that should be descriptive and unique to your team and institution. </li> <li>The <code>run_type</code> is one of the three types \u201cautomatic\u201d, \u201cgeneration-only\u201d, or \u201cinteractive\u201d. </li> <li>The <code>turn_id</code> is the identifier for each turn of the conversation and has the following format: <code>{topic_id}_{turn_number}</code>. For example, <code>turn_id</code> of <code>1-2_3</code> refers to the turn <code>3</code> of topic <code>1-2</code>.</li> <li>Each turn should also contain a list of <code>responses</code>. A response consists of <code>text</code> and a <code>citations</code> list. The <code>citations</code> list is a list of passage provenances used for generating the response. </li> <li>Each turn includes a set of statements from the PTKB in the field called <code>ptkb_provenance</code>. It can also contain some statements from previous interactions of the user with the system. </li> <li>The field <code>references</code> includes the list of retrieved passages by retrieval model. </li> <li>For the \u201cgeneration-only\u201d runs, the <code>reference</code> field should be empty.</li> </ul> <p>The run file should be in <code>.jsonl</code> format and should include individual JSON objects for each <code>turn_id</code>. For readability and illustration purposes, above example was pretty-printed (i.e., line breaks and indents render the example invalid <code>.jsonl</code>).     </p> <p>For provenance ranking, this will be converted to a traditional TREC run format. These rankings are created based on the <code>references</code> field: </p> <pre><code>31_1-1 Q0 clueweb22-en0000-94-02275:0 1 0.5 sample_run\n</code></pre> <p>Runs may include up to 1000 responses for each user turn. For provenance ranking, only the first 1000 pieces of unique provenance will be used. As in previous year of iKAT, only limited top-k responses and provenances will be assessed according to resource constraints.</p>"},{"location":"guidelines/#evaluation","title":"Evaluation","text":"<p>We will use the relevance assessment methods used in the previous year of iKAT 2023 for relevance to individual turns. </p> <ol> <li>Citations Assessment:     The cited passaged that are used to produce the responses will be pooled and assessed. The relevance scale will be the same as in previous years of CAsT and the first year of iKAT, see the previous overview papers for details. The standard ranking metrics such as P@k, NDCG@k, and MAP will be calculated using the judgments. We will focus on the earlier positions (1, 3, 5). </li> <li>Response Assessment:     A response may be a simple passage or a summary of one or more passages. We will assess the top-ranked response from all systems for a subset of turns. Only responses with at least one citation will be judged. We will assess the quality of generated responses in three different ways. First, we will assess the relevance, naturalness, completeness, and groundedness. Second,  we assess the precision and recall of nuggets of information for the responses. We consider the nugget recall and nugget precision as the coverage and correctness of the responses, respectively. Third, we use surface-based metrics like BLEU and ROUGE to n-gram similarity between the generated response and the manual response. The responses and judgments on them will be released with the judgments. </li> <li>Extracted Relevant PTKB Statements Assessment: The standard metrics like Precision, Recall, and F1 will be used for evaluating the identified list of relevant statements from PTKB. We will assess both pre-defined and newly extracted PTKB statements by the teams. </li> <li>Dialogue-level Assessment: Assessing the whole dialogue and the trajectory in the interactive subtask. Given the flexible nature of the simulated dialogues, we will devise dialogue-level metrics that take into account the system\u2019s capabilities to provide useful information to the users in the dialogue as a whole. These could be based on ideas such as \u201clast-bot-standing\u201d, or returning the most nuggets in the same time budget. More details will follow later. </li> </ol> <p>Similar to the first two years of iKAT, only a subset of turns may be evaluated for provenance ranking effectiveness and response generation quality. This will be disclosed to participants only after the assessment is completed.</p>"},{"location":"guidelines/#related-resources","title":"Related Resources","text":"<p>Below are some useful code resources related to TREC iKAT. </p> <ul> <li>Official TREC iKAT Organizer GitHub: <ul> <li>https://github.com/irlabamsterdam/iKAT</li> </ul> </li> <li>Related code and baselines:<ul> <li>https://github.com/fengranMark/PersonalizedCIR</li> <li>https://github.com/EricLangezaal/PersonalizedCIR</li> <li>https://github.com/SimonLupart/ikat-2024-baseline</li> <li>https://github.com/shubham526/ikat-2024</li> </ul> </li> </ul>"},{"location":"guidelines/#timeline","title":"Timeline","text":"<p>Dates are given in the Anywhere on Earth (AoE) timezone.  </p> Task Date Guidelines released May 16, 2025 Test topics released June 23, 2025 Offline submission deadline July 27, 2025 Interactive submission deadline August 15, 2025 Results released to participants October, 2025"},{"location":"simulation-api/","title":"TREC iKAT Simulation API","text":"<p>In TREC iKAT Year 3, we offer an interactive task in which a simulated user sends out utterances to participants' systems. For more information on this task please check the guidelines.</p> <p>This API can be used for two main purposes:</p> <ol> <li>Submitting runs for the interactive task.   </li> <li>Developing, debugging and testing of participants' systems.</li> </ol> <p>The API is available at https://trec-ikat25.webis.de/simulation/. From there you will be redirected to a reference of all provided endpoints and their expected in- and outputs.</p>"},{"location":"simulation-api/#authentication","title":"Authentication","text":"<p>Participants need to be registered to TREC iKAT to use this API. You can use this form to do so. As a result, participants will receive a base64-encoded access token by mail. </p> <p>All requests to this API have to be authenticated. Participants can authenticate themselves by providing their access token in the HTTP <code>Authorization</code> header. </p> <p>You can test if your access token is valid by calling the following method:</p> <pre><code>curl -H \"Authorization: Bearer &lt;token&gt;\" https://trec-ikat25.webis.de/simulation/auth/verify\n</code></pre> <p>If your token is valid, the API will respond with:</p> <pre><code>{\"team_id\":  \"&lt;TEAM_ID&gt;\"}\n</code></pre>"},{"location":"simulation-api/#submitting-runs","title":"Submitting Runs","text":"<p>Important: With the following information the final participant runs will be submitted. For debugging and developing participant systems refer to this information below.  </p> <p>Conversations are always user-initiated. In a first step, participants submit meta-information about their run and receive the first user utterance for the first topic. From there, participants and the simulated user take turns in responding to each other's utterances. Users terminate the conversations and switch topics automatically.</p>"},{"location":"simulation-api/#1-initializing-a-run","title":"1. Initializing a Run","text":"<p>Participants start a run by providing the following run meta-information and in turn receive the first user utterance for the first topic. </p> <p>Please provide the following meta-information:</p> <ul> <li><code>run_id</code>: Unique name that identifies your run. Please choose a meaningful name (e.g., <code>teamA-llama3-dense-retrieval</code>).  </li> <li><code>description</code>: Brief description of the used approach in this run.  </li> <li><code>track_persona</code>: Indicate if your approach extracts and keeps track of persona statements of reoccurring users.   </li> </ul> <p>An example request looks like this:</p> <pre><code>curl -X POST -H \"Authorization: Bearer &lt;token&gt;\" -H \"Content-Type: application/json\" -d \\\n '{\n    \"run_id\": \"teamA-llama3-dense-retrieval\",\n    \"description\": \"The approach uses a retrieval-augmented generation pipeline with llama3.3 70B as generation backbone and a dense retrieval approach for the retrieval of relevant passages.\", \n     \"track_persona\": false\n  }' https://trec-ikat25.webis.de/simulation/run/start\n</code></pre> <p>A response to a successful request looks like this:</p> <pre><code>{\n  \"timestamp\":\"2025-05-06T10:58:33.400920\",\n  \"run_id\":\"teamA-llama3-dense-retrieval\",\n  \"topic_id\":\"1-1\",\n  \"user_id\":\"f3333f5c-8313-4941-beea-f24de25a583a\",\n  \"utterance\":\"Show me universities with computer science programs.\",\n  \"history\":[\n    {\"role\":\"user\",\"content\":\"Show me universities with computer science programs.\"}\n  ],\n  \"last_response_of_session\":false,\n  \"last_response_of_run\":false\n}\n</code></pre> <p>Responses contain the following fields:</p> <ul> <li><code>timestamp</code>: Time and date of the current response.</li> <li><code>run_id</code>: The chosen identifier for the run.</li> <li><code>topic_id</code>: Id of the current topic of TREC iKAT 2025 test set. </li> <li><code>user_id</code>: Uuid4 that identifies a (simulated) user the system talks with. This helps to identify reoccurring users. </li> <li><code>utterance</code>: Current utterance of the user.</li> <li><code>history</code>: A list of the current and prior utterances in LLM-compatible format that can be used to track the current context of the conversation. </li> <li><code>last_response_of_session</code>: Flag that indicates that the current session (for the current topic) is terminated by the user. If true, the next response will be about a new topic. </li> <li><code>last_response_of_run</code>: Flag that indicates that the current session is terminated by the user and that there are no open topics left. If true, your run is completed and successfully submitted.  </li> </ul>"},{"location":"simulation-api/#2-responding-to-user-utterances","title":"2. Responding to User Utterances","text":"<p>After a run is started like shown above, participants receive the first user utterance. From now until the run is completed, participants respond to user utterances by calling the <code>run/continue</code> endpoint. Participants should always provide the following information: </p> <ul> <li><code>run_id</code>: The chosen identifier for the run.</li> <li><code>response</code>: The generated response of the system. This cannot exceed 250 tokens.</li> <li><code>citations</code>: The (up to) top 1000 relevant passages given as their ids and their relevance score. </li> <li><code>ptkb_provenance</code>: (Optional) PTKB statements that are considered relevant for the current turn. </li> </ul> <p>An example request looks like this:</p> <pre><code>curl -X POST -H \"Authorization: Bearer &lt;token&gt;\" -H \"Content-Type: application/json\" -d\\\n '{\n   \"run_id\": \"teamA-llama3-dense-retrieval\", \n   \"response\": \"There is University of Amsterdam.\",\n   \"citations\": {\n     \"clueweb22-en0032-04-00208:7\": 0.8, \n     \"clueweb22-en0027-84-11778:0\": 0.4\n   },\n   \"ptkb_provenance\": [\n     \"I live in the Netherlands.\"\n   ]\n  }' https://trec-ikat25.webis.de/simulation/run/continue\n</code></pre> <p>Successful requests always result in responses formatted as mentioned above. </p> <pre><code>{\n  \"timestamp\":\"2025-05-06T11:16:53.306006\",\"run_name\":\"teamA-llama3-dense-retrieval\",\n  \"topic_id\":\"1-1\",\n  \"user_id\":\"f3333f5c-8313-4941-beea-f24de25a583a\",\n  \"utterance\":\"That\u2019s a good start, but the initial response wasn\u2019t helpful. Could you specifically tell me which programs at the University of Amsterdam emphasize courses similar to the ones I enjoyed during my bachelor\u2019s degree \u2013 specifically data structures, algorithms, data mining, and artificial intelligence?\",\n  \"history\":[\n    {\"role\":\"user\",\"content\":\"Show me universities with computer science programs.\"},\n    {\"role\":\"assistant\",\"content\":\"University of Amsterdam\"},\n    {\"role\":\"user\",\"content\":\"That\u2019s a good start, but the initial response wasn\u2019t helpful. Could you specifically tell me which programs at the University of Amsterdam emphasize courses similar to the ones I enjoyed during my bachelor\u2019s degree \u2013 specifically data structures, algorithms, data mining, and artificial intelligence?\"}],\n  \"last_response_of_session\":false, \n  \"last_response_of_run\":false\n}\n</code></pre>"},{"location":"simulation-api/#3-switching-topics","title":"3. Switching Topics","text":"<p>There is no way to manually end the current conversation and move on to the next topic. The (simulated) user is responsible for that decision. This decision is indicated by the flag <code>last_response_of_session</code>. If this flag is true, the next call to the <code>run/continue</code> endpoint will result in the initial user utterance for the next topic. </p> <p>Important: If participants provide a response at the turn after this flag becomes true, this response will be ignored. The <code>response</code> field can be an empty string or <code>null</code> in this case.</p>"},{"location":"simulation-api/#4-finishing-a-run","title":"4. Finishing a Run","text":"<p>When the (simulated) users inquired about all topics in the dataset, the flag <code>last_response_of_run</code> will become true. This indicates that the run is done. Further requests after this flag becomes true will lead to errors.</p>"},{"location":"simulation-api/#limits","title":"Limits","text":"<p>Participants can submit up to two runs. Incomplete runs will be evaluated as well. Missing topics will be assessed with a performance of zero.   </p>"},{"location":"simulation-api/#debugging-testing-a-system","title":"Debugging / Testing a System","text":"<p>Participants can also use the API for debugging and testing their systems. To this end, there are equivalent endpoints that emulate a run submission. </p> <ul> <li><code>https://trec-ikat25.webis.de/simulation/debug/start</code></li> <li><code>https://trec-ikat25.webis.de/simulation/debug/continue</code></li> </ul> <p>These two endpoints expect the exact same inputs as their run submission counterparts. </p> <p>Important: Responses submitted to the debugging endpoints will not be evaluated. </p>"},{"location":"simulation-api/#budget-for-requests","title":"Budget for Requests","text":"<p>Participants are allowed a limited number of requests for the debugging of their systems. In total, participants can have up to 100 full conversations with a user until all credits are used up. </p> <p>To keep track of the available budget, participants can check their available credits with the following request. </p> <pre><code>curl -H \"Authorization: Bearer &lt;token&gt;\" \"https://trec-ikat25.webis.de/simulation/budget/check\" \n</code></pre>"},{"location":"simulation-api/#monitor-submission-progress","title":"Monitor Submission Progress","text":""},{"location":"simulation-api/#get-state-of-current-session","title":"Get State of Current Session","text":"<p>In case a participants' system crashes mid conversation and didn't keep track of the last utterance, participants can request the state of the current search session without having to provide a response right away. No utterance will be lost by the server and the conversation can be continued right where the crash happened. </p> <pre><code>curl -X GET -H \"Authorization: Bearer &lt;token&gt;\" \"https://trec-ikat25.webis.de/simulation/run/session?run_id=teamA-llama3-dense-retrieval\"\n</code></pre> <p>The response follows the same format than when a user utterance is received.  </p>"},{"location":"simulation-api/#check-run-status","title":"Check Run Status","text":"<p>Participants can check the status of their runs to make sure that everything worked as expected. The following request can be used to check the status.</p> <pre><code>curl -X GET -H \"Authorization: Bearer &lt;token&gt;\" \"https://trec-ikat25.webis.de/simulation/run/status?run_id=teamA-llama3-dense-retrieval\"\n</code></pre> <p>A typical response looks like the following.</p> <pre><code>{\n  \"status\": \"complete\",\n  \"open_topics\": [],\n  \"done_topics\": [...]\n}\n</code></pre> <p>Responses contain the following fields: * <code>status</code>: There are three possible values for status:   * <code>active</code>: The requested run is currently being worked on and is not complete yet.   * <code>completed</code>: The requested run is done and was submitted successfully.   * <code>inactive</code>: The run was not completed but (due to an error) the run is currently not active. This can only happen if the server crashes. The run can be worked on as usual which will push the run back into the <code>active</code> state. * <code>open_topics</code>: A list of topic ids that still need to be worked on to reach the <code>complete</code> status. * <code>done_topics</code>: A list of topic ids of topics that were already completed in this run. </p>"},{"location":"simulation-api/#dump-run-file","title":"Dump Run File","text":"<p>For your own documentation you can get a copy of the run submission file. </p> <p>Important: You don't have to submit this file anywhere. This file is just for your own reference.</p> <p>To produce the run file you can run the following command:</p> <pre><code>curl -H \"Authorization: Bearer &lt;token&gt;\" \"localhost:8888/run/dump?run_id=teamA-llama3-dense-retrieval\"\n</code></pre> <p>As a response, you will receive the run file in the submission format for this task.</p> <pre><code>[\n  {\n    \"metadata\": {\n      \"team_id\": \"teamA\",\n      \"run_id\": \"teamA-llama3-dense-retrieval\",\n      \"type\": \"interactive\",\n      \"description\": \"The approach uses a retrieval-augmented generation pipeline with llama3.3 70B as generation backbone and a dense retrieval approach for the retrieval of relevant passages.\",\n      \"track_persona\": 0,\n      \"topic_id\": \"1-1_0\"\n    },\n    \"responses\": [\n      {\n        \"rank\": 1,\n        \"user_utterance\": \"Okay, let\u2019s start with a list of elite universities in Canada.\",\n        \"text\": \"I don't know.\",\n        \"citations\": {},\n        \"ptkb_provenance\": []\n      }\n    ],\n    \"references\": {}\n  },\n  {\n     \"metadata\": {\n      \"team_id\": \"teamA\",\n      \"run_id\": \"teamA-llama3-dense-retrieval\",\n      \"type\": \"interactive\",\n      \"description\": \"The approach uses a retrieval-augmented generation pipeline with llama3.3 70B as generation backbone and a dense retrieval approach for the retrieval of relevant passages.\",\n      \"track_persona\": 0,\n      \"topic_id\": \"1-1_1\"\n    },\n    \"responses\": [\n      {\n        \"rank\": 1,\n        \"user_utterance\": \"Specifically, which elite universities exist in Canada that might be suitable for a Computer Science graduate from the Netherlands, considering my preference for moderate climates and lack of a driver's license?\",\n        \"text\": \"I don't know.\",\n        \"citations\": {},\n        \"ptkb_provenance\": []\n      }\n    ],\n    \"references\": {}\n  },\n  ...\n]\n</code></pre>"},{"location":"simulation-api/#support","title":"Support","text":"<p>Questions, technical issues or feedback? Write a mail or send a message in the Slack:</p> <ul> <li>Email: trec.ikat.ai@gmail.com</li> <li>Email: marcel.gohsen@uni-weimar.de. </li> <li>Slack: ikat-2025</li> </ul>"}]}